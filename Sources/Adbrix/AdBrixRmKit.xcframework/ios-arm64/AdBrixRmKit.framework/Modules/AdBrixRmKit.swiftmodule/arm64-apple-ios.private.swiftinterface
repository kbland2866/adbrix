// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name AdBrixRmKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AdBrixRmKit
import AdServices
import AdSupport
import AppTrackingTransparency
import CommonCrypto
import CoreTelephony
import CryptoKit
import Foundation
import Network
import SQLite3
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
@objc @_hasMissingDesignatedInitializers public class AbxRemotePushModel : ObjectiveC.NSObject {
  final public let title: Swift.String
  final public let subtitle: Swift.String
  final public let body: Swift.String
  final public let imageUrl: Swift.String
  final public let genVibe: Swift.String
  final public let genSound: Swift.String
  final public let deeplinkUrl: Swift.String
  final public let deeplinkJson: [Swift.String : Any]
  final public let campaignId: Swift.String
  final public let campaignRevisionNo: Swift.Int
  final public let stepId: Swift.String
  final public let cycleTime: Swift.String
  final public let notificationId: Swift.Int
  @objc public init(campaignId: Swift.String, campaignRevisionNo: Swift.Int, stepId: Swift.String, cycleTime: Swift.String) throws
  @objc public func toString() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SubscriptionStatus : ObjectiveC.NSObject {
  @objc public var informativeNotificationFlag: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationFlag: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationFlagForPushChannel: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationFlagForSmsChannel: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationFlagForKakaoChannel: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationAtNightFlag: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationAtNightFlagForPushChannel: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationAtNightFlagForSmsChannel: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  @objc public var marketingNotificationAtNightFlagForKakaoChannel: AdBrixRmKit.SubscriptionStatus._Type {
    get
  }
  public var allCases: [AdBrixRmKit.SubscriptionStatus._Type] {
    get
  }
  @objc public static func Builder() -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc public func send(completion: @escaping (AdBrixRmKit.SetSubscriptionResult) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @objc @available(iOS 13.0, *)
  public func send() async -> AdBrixRmKit.SetSubscriptionResult
  #endif
  @objc public enum _Type : Swift.Int {
    case SUBSCRIBED
    case UNSUBSCRIBED
    case UNDEFINED
    public var isSubscribed: Swift.Bool {
      get
    }
    public var isUnSubscribed: Swift.Bool {
      get
    }
    public var isUndefined: Swift.Bool {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SubscriptionStatusBuilder : ObjectiveC.NSObject {
  @objc @discardableResult
  public func setInformativeNotificationFlag(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationFlag(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationFlagForPushChannel(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationFlagForSmsChannel(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationFlagForKakaoChannel(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationAtNightFlag(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationAtNightFlagForPushChannel(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationAtNightFlagForSmsChannel(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc @discardableResult
  public func setMarketingNotificationAtNightFlagForKakaoChannel(to status: AdBrixRmKit.SubscriptionStatus._Type) -> AdBrixRmKit.SubscriptionStatusBuilder
  @objc public func build() -> AdBrixRmKit.SubscriptionStatus
  @objc deinit
}
@objc public enum UserProfileServerError : Swift.Int, Swift.Error {
  case RESULT_CODE_INVALID_TOKEN = 4001
  case RESULT_CODE_INVALID_REQUEST = 4002
  case RESULT_CODE_BLOCKED_ACCOUNT = 4003
  case RESULT_CODE_UNAUTHORIZED = 4004
  case RESULT_CODE_TERMINATED_API = 4005
  case RESULT_CODE_RATE_LIMIT_EXCEEDED = 4006
  case RESULT_CODE_WRONG_PROPERTY = 4007
  case RESULT_CODE_INTERNAL_SERVER_ERROR = 5001
  case RESULT_CODE_SERVICE_MAINTENANCE = 5002
  case RESULT_CODE_SERVER_BUSY = 5003
  case RESULT_CODE_PROPERTY_REQUIRED = -253
  case RESULT_CODE_USER_ID_REQUIRED = -254
  case RESULT_CODE_UNKNOWN_ERROR = -255
  case RESULT_CODE_NETWORK_ERROR = -256
  case RESULT_CODE_NO_DATA_TO_GET = -257
  case RESULT_CODE_SDK_DISABLED = -258
  case RESULT_CODE_SDK_STATUS = -259
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension AdBrixRmKit.UserProfileServerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GetSubscriptionResult : AdBrixRmKit.CIResult {
  @objc final public let value: AdBrixRmKit.SubscriptionStatus?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SetSubscriptionResult : AdBrixRmKit.CIResult {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ActionHistory : ObjectiveC.NSObject {
  @objc final public let historyId: Swift.String
  @objc final public let actionType: Swift.String
  @objc final public let timeStamp: Swift.Int64
  @objc final public let content: AdBrixRmKit.ActionContent
  @objc final public let isRead: Swift.Bool
  @objc final public let group: Swift.String
  @objc final public let isServerSynced: Swift.Bool
  @objc public func toJsonString() -> Swift.String
  @objc public static func fromDictionary(historyJsonDic: [Swift.String : Any], isServerSynced: Swift.Bool) -> AdBrixRmKit.ActionHistory?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ActionContent : ObjectiveC.NSObject {
  @objc final public let notificationId: Swift.String?
  @objc final public let title: Swift.String?
  @objc final public let subtitle: Swift.String?
  @objc final public let body: Swift.String?
  @objc final public let bigTextTitle: Swift.String?
  @objc final public let bigTextBody: Swift.String?
  @objc final public let summaryText: Swift.String?
  @objc final public let imgUrl: Swift.String?
  @objc final public let largeIconUrl: Swift.String?
  @objc final public let deeplinkJson: [Swift.String : Swift.String]?
  @objc final public let deeplinkUrl: Swift.String?
  final public let isWideImage: Swift.Bool?
  @objc final public let imageClickLink: Swift.String?
  @objc final public let kakaoButtons: [AdBrixRmKit.KakaoButton]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class KakaoButton : ObjectiveC.NSObject {
  @objc final public let name: Swift.String?
  @objc final public let type: Swift.String?
  @objc final public let urlPc: Swift.String?
  @objc final public let urlMobile: Swift.String?
  @objc final public let scheme: Swift.String?
  @objc final public let chatExtra: Swift.String?
  @objc final public let chatEvent: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ActionHistoryResult : ObjectiveC.NSObject {
  @objc final public let isSucceeded: Swift.Bool
  @objc public func getData() -> [AdBrixRmKit.ActionHistory]?
  @objc public func getError() -> Swift.Error?
  @objc deinit
}
@objc public enum ActionHistoryIdType : Swift.Int {
  case USER_ID = 0, ADID
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AdBrixMultiPushProviderController : ObjectiveC.NSObject {
  public static let getInstance: AdBrixRmKit.AdBrixMultiPushProviderController
  @objc public class func getInstanceObjc() -> AdBrixRmKit.AdBrixMultiPushProviderController
  @objc public func didReceiveAbxPush(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc public func abxPushServiceExtensionTimeWillExpire()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class AdBrixPushService : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic public init()
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AdBrixRmAttrModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func getAttrData() -> [Swift.String : Any]
  @objc public func setAttrDataString(_ key: Swift.String, _ value: Swift.String)
  @objc public func setAttrDataDouble(_ key: Swift.String, _ value: Swift.Double)
  @objc public func setAttrDataUInt64(_ key: Swift.String, _ value: Swift.UInt64)
  @objc public func setAttrDataInt64(_ key: Swift.String, _ value: Swift.Int64)
  @objc public func setAttrDataInt(_ key: Swift.String, _ value: Swift.Int)
  @objc public func setAttrDataBool(_ key: Swift.String, _ value: Swift.Bool)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GetCiProfileResult : AdBrixRmKit.CIResult {
  @objc final public let value: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GetAllCiProfileResult : AdBrixRmKit.CIResult {
  final public let value: [Swift.String : Any?]?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SetCiProfileResult : AdBrixRmKit.CIResult {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DfnUtil : ObjectiveC.NSObject {
  @objc public static func getLanguage() -> Swift.String
  @objc public static func getPushEnable() -> Swift.Bool
  @objc public static func getOsPushEnable() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum Completion : Swift.Int {
  case success = 0, fail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class DfnResult : ObjectiveC.NSObject {
  @objc final public let isSuccess: Swift.Bool
  @objc final public let error: Swift.Error?
  @objc public init(isSuccess: Swift.Bool, error: Swift.Error?)
  @objc deinit
}
@objc @objcMembers public class CIResult : ObjectiveC.NSObject {
  @objc final public let isSuccess: Swift.Bool
  final public let resultCode: Swift.Int?
  @objc final public let resultMessage: Swift.String?
  @objc public var resultCodeObjc: Foundation.NSNumber? {
    @objc get
  }
  public init(isSuccess: Swift.Bool, resultCode: Swift.Int?, resultMessage: Swift.String?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AdBrixRM : ObjectiveC.NSObject {
  public static let getInstance: AdBrixRmKit.AdBrixRM
  @objc public class func sharedInstance() -> AdBrixRmKit.AdBrixRM
  public var delegateDeferredDeeplink: AdBrixRmKit.AdBrixRMDeferredDeeplinkDelegate?
  public var delegateDeeplink: AdBrixRmKit.AdBrixRMDeeplinkDelegate?
  public var delegateLocalPush: AdBrixRmKit.AdBrixRmPushLocalDelegate?
  public var delegateRemotePush: AdBrixRmKit.AdBrixRmPushRemoteDelegate?
  public var delegateInAppMessageClick: AdBrixRmKit.AdBrixRMInAppMessageClickDelegate?
  public var delegateInAppMessageAutoFetch: AdBrixRmKit.DfnInAppMessageAutoFetchDelegate?
  @objc public func stopGettingIDFA()
  @objc public func startGettingIDFA()
  @objc public func initAdBrix(appKey: Swift.String, secretKey: Swift.String)
  @objc public func setEventUploadCountInterval(_ countInterval: AdBrixRmKit.AdBrixRM.AdBrixEventUploadCountInterval)
  @objc public func convertCountInterval(_ code: Swift.Int) -> AdBrixRmKit.AdBrixRM.AdBrixEventUploadCountInterval
  @objc public func setEventUploadTimeInterval(_ timeInterval: AdBrixRmKit.AdBrixRM.AdBrixEventUploadTimeInterval)
  @objc public func convertTimeInterval(_ code: Swift.Int) -> AdBrixRmKit.AdBrixRM.AdBrixEventUploadTimeInterval
  @objc public func gdprForgetMe()
  @objc public func isGdprForgetMe() -> Swift.Bool
  @objc public func deepLinkOpen(urlStr: Swift.String)
  @objc public func deepLinkOpen(url: Foundation.URL)
  @objc public func login(userId: Swift.String)
  @objc public func logout()
  @objc public func getUserId(completion: @escaping (Swift.String) -> ())
  @objc public func setAge(int: Swift.Int)
  @objc public func setGender(adBrixGenderType: AdBrixRmKit.AdBrixRM.AdBrixGenderType)
  @objc public func convertGender(_ code: Swift.Int) -> AdBrixRmKit.AdBrixRM.AdBrixGenderType
  @objc public func setUserPropertiesWithAttr(attrModel: AdBrixRmKit.AdBrixRmAttrModel)
  @available(*, deprecated)
  @objc public func clearUserProperties()
  @available(*, deprecated, message: "use setKakaoId(kakaoId:completion:) instead")
  @objc public func setKakaoId(kakaoId: Swift.String)
  @objc public func setPhoneNumber(number: Swift.String, completion: @escaping (AdBrixRmKit.SetCiProfileResult) -> ())
  @objc public func setKakaoId(kakaoId: Swift.String, completion: @escaping (AdBrixRmKit.SetCiProfileResult) -> ())
  @available(*, deprecated)
  @objc public func setUserCiWithAttr(attrModel: AdBrixRmKit.AdBrixRmAttrModel)
  @available(*, deprecated)
  @objc public func setLocation(latitude: Swift.Double, longitude: Swift.Double)
  @objc public func event(eventName: Swift.String)
  @objc public func eventWithAttr(eventName: Swift.String, value: AdBrixRmKit.AdBrixRmAttrModel)
  @objc public func commonSignUp(channel: AdBrixRmKit.AdBrixRM.AdBrixRmSignUpChannel)
  @objc public func commonSignUpWithAttr(channel: AdBrixRmKit.AdBrixRM.AdBrixRmSignUpChannel, commonAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func getSignUpChannelByAdBrixRmSignUpChannel(_ channel: AdBrixRmKit.AdBrixRM.AdBrixRmSignUpChannel) -> Swift.String
  @objc public func getSignUpChannel(_ channel: Swift.Int) -> Swift.String
  @objc public func convertSignUpChannel(_ code: Swift.Int) -> AdBrixRmKit.AdBrixRM.AdBrixRmSignUpChannel
  @objc public func commonAppUpdate(prev_ver: Swift.String, curr_ver: Swift.String)
  @objc public func commonAppUpdateWithAttr(prev_ver: Swift.String, curr_ver: Swift.String, commonAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func commonInvite(channel: AdBrixRmKit.AdBrixRM.AdBrixRmInviteChannel)
  @objc public func commonInviteWithAttr(channel: AdBrixRmKit.AdBrixRM.AdBrixRmInviteChannel, commonAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func getInviteChannelByAdBrixRmSignUpChannel(_ channel: AdBrixRmKit.AdBrixRM.AdBrixRmInviteChannel) -> Swift.String
  @objc public func getInviteChannel(_ channel: Swift.Int) -> Swift.String
  @objc public func convertInviteChannel(_ code: Swift.Int) -> AdBrixRmKit.AdBrixRM.AdBrixRmInviteChannel
  @objc public func commonUseCredit()
  @objc public func commonUseCreditWithAttr(commonAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func commonPurchase(orderId: Swift.String, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderSales: Swift.Double = 0, discount: Swift.Double, deliveryCharge: Swift.Double, paymentMethod: AdBrixRmKit.AdBrixRM.AdbrixRmPaymentMethod)
  @objc public func commonPurchaseWithAttr(orderId: Swift.String, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderSales: Swift.Double = 0, discount: Swift.Double, deliveryCharge: Swift.Double, paymentMethod: AdBrixRmKit.AdBrixRM.AdbrixRmPaymentMethod, orderAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func getPaymentMethodByAdbrixRmPaymentMethod(_ method: AdBrixRmKit.AdBrixRM.AdbrixRmPaymentMethod) -> Swift.String
  @objc public func getPaymentMethod(_ method: Swift.Int) -> Swift.String
  @objc public func convertPayment(_ code: Swift.Int) -> AdBrixRmKit.AdBrixRM.AdbrixRmPaymentMethod
  @objc public func createCommerceProductDataWithAttr(productId: Swift.String, productName: Swift.String, price: Swift.Double, quantity: Swift.Int, discount: Swift.Double, currencyString: Swift.String?, category: AdBrixRmKit.AdBrixRmCommerceProductCategoryModel?, productAttrsMap: AdBrixRmKit.AdBrixRmAttrModel?) -> AdBrixRmKit.AdBrixRmCommerceProductModel
  @objc public func createAttrModel(dictionary: [Swift.String : Swift.String]) -> AdBrixRmKit.AdBrixRmAttrModel
  @objc public func createCommerceProductCategoryData(category: Swift.String, category2: Swift.String = "", category3: Swift.String = "", category4: Swift.String = "", category5: Swift.String = "") -> AdBrixRmKit.AdBrixRmCommerceProductCategoryModel
  @objc public func getCurrencyStringByAdBrixCurrencyType(_ currency: AdBrixRmKit.AdBrixRM.AdBrixRmCurrencyType) -> Swift.String
  @objc public func getCurrencyString(_ currency: Swift.Int) -> Swift.String
  @objc public func commerceViewHome()
  @objc public func commerceViewHomeWithAttr(orderAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func commerceCategoryView(category: AdBrixRmKit.AdBrixRmCommerceProductCategoryModel, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel])
  @objc public func getSubscriptionStatus(completion: @escaping (AdBrixRmKit.GetSubscriptionResult) -> ())
  @objc public func setSubscriptionStatus(status: AdBrixRmKit.SubscriptionStatus, completion: @escaping (AdBrixRmKit.SetSubscriptionResult) -> ())
  @objc public func commerceCategoryViewWithAttr(category: AdBrixRmKit.AdBrixRmCommerceProductCategoryModel, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func commerceProductView(productInfo: AdBrixRmKit.AdBrixRmCommerceProductModel)
  @objc public func commerceProductViewWithAttr(productInfo: AdBrixRmKit.AdBrixRmCommerceProductModel, orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commerceAddToCart(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel])
  @objc public func commerceAddToCartWithAttr(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc(commerceAddToWishList:) public func commerceAddToWishList(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel])
  @objc(commerceAddToWishList:withAttr:) public func commerceAddToWishListWithAttr(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commerceAddToWishList(productInfo: AdBrixRmKit.AdBrixRmCommerceProductModel)
  @objc public func commerceAddToWishListWithAttr(productInfo: AdBrixRmKit.AdBrixRmCommerceProductModel, orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commerceReviewOrder(orderId: Swift.String, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], discount: Swift.Double, deliveryCharge: Swift.Double)
  @objc public func commerceReviewOrderWithAttr(orderId: Swift.String, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], discount: Swift.Double, deliveryCharge: Swift.Double, orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commerceRefund(orderId: Swift.String, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], penaltyCharge: Swift.Double)
  @objc public func commerceRefundWithAttr(orderId: Swift.String, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], penaltyCharge: Swift.Double, orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commerceSearch(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], keyword: Swift.String)
  @objc public func commerceSearchWithAttr(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], keyword: Swift.String, orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc(commerceShare:productInfo:) public func commerceShare(channel: AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel])
  @objc(commerceShareWithAttr:productInfo:orderAttr:) public func commerceShareWithAttr(channel: AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel, productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commerceShare(channel: AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel, productInfo: AdBrixRmKit.AdBrixRmCommerceProductModel)
  @objc public func commerceShareWithAttr(channel: AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel, productInfo: AdBrixRmKit.AdBrixRmCommerceProductModel, orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func getSharingChannelByAdBrixRmSharingChannel(_ channel: AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel) -> Swift.String
  @objc public func getSharingChannel(_ channel: Swift.Int) -> Swift.String
  @objc public func convertChannel(_ code: Swift.Int) -> AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel
  @objc public func commerceListView(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel])
  @objc public func commerceListViewWithAttr(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commerceCartView(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel])
  @objc public func commerceCartViewWithAttr(productInfo: [AdBrixRmKit.AdBrixRmCommerceProductModel], orderAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func commercePaymentInfoAdded()
  @objc public func commercePaymentInfoAddedWithAttr(paymentInfoAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func gameTutorialCompleted(isSkip: Swift.Bool)
  @objc public func gameTutorialCompletedWithAttr(isSkip: Swift.Bool, gameInfoAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @objc public func gameCharacterCreated()
  @objc public func gameCharacterCreatedWithAttr(gameInfoAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func gameStageCleared(stageName: Swift.String)
  @objc public func gameStageClearedWithAttr(stageName: Swift.String, gameInfoAttr: AdBrixRmKit.AdBrixRmAttrModel?)
  @objc public func gameLevelAchieved(level: Swift.Int)
  @objc public func gameLevelAchievedWithAttr(level: Swift.Int, gameInfoAttr: AdBrixRmKit.AdBrixRmAttrModel? = nil)
  @available(*, deprecated)
  @objc public func deleteUserDataAndStopSDK(_ userId: Swift.String, _ completion: @escaping (AdBrixRmKit.Completion) -> ())
  @available(*, deprecated)
  @objc public func restartSDK(_ userId: Swift.String, _ completion: @escaping (AdBrixRmKit.Completion) -> ())
  @objc public func setRegistrationId(deviceToken: Foundation.Data)
  @objc public func setPushEnable(toPushEnable: Swift.Bool)
  @objc public func fetchActionHistoryByUserId(token: Swift.String?, actionType: [Swift.String], completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func fetchActionHistoryByAdid(token: Swift.String?, actionType: [Swift.String], completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func insertPushData(pushJsonDic: [Swift.String : Any])
  @objc public func getActionHistory(skip: Swift.Int, limit: Swift.Int, actionType: [Swift.String], completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func getAllActionHistory(actionType: [Swift.String], completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func deleteAllActionHistoryByUserId(token: Swift.String?, completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func deleteAllActionHistoryByAdid(token: Swift.String?, completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func deleteActionHistory(token: Swift.String?, historyId: Swift.String, timeStamp: Swift.Int64, completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func clearSyncedActionHistoryInLocalDB(completion: @escaping (AdBrixRmKit.ActionHistoryResult) -> ())
  @objc public func clearAllActionHistoryInLocalDB()
  @objc public func setAdBrixRmPushLocalDelegate(delegate: AdBrixRmKit.AdBrixRmPushLocalDelegate)
  @objc public func setAdBrixRmPushRemoteDelegate(delegate: AdBrixRmKit.AdBrixRmPushRemoteDelegate)
  @objc public func registerLocalPushNotification(date: Foundation.Date, title: Swift.String, subtitle: Swift.String?, body: Swift.String, sound: UserNotifications.UNNotificationSound?, categoryId: Swift.String?, threadId: Swift.String?, badgeNumber: Foundation.NSNumber?, image: Foundation.URL?, attrDic: [Swift.String : Any]?, completionHandler: @escaping (_ isRegSucc: Swift.Bool, _ error: Swift.Error?, _ pushId: Swift.String) -> Swift.Void)
  @objc public func registerLocalPushNotification(id: Swift.String, date: Foundation.Date, title: Swift.String, subtitle: Swift.String?, body: Swift.String, sound: UserNotifications.UNNotificationSound?, categoryId: Swift.String?, threadId: Swift.String?, badgeNumber: Foundation.NSNumber?, image: Foundation.URL?, attrDic: [Swift.String : Any]?, completionHandler: @escaping (_ isRegSucc: Swift.Bool, _ error: Swift.Error?, _ pushId: Swift.String) -> Swift.Void)
  @objc public func getRegisteredLocalPushNotification(completeHandler: @escaping ([Swift.String]) -> ())
  @objc public func cancelLocalPushNotification(ids: [Swift.String])
  @objc public func cancelLocalPushNotificationAll()
  @objc public func userNotificationCenter(center: UserNotifications.UNUserNotificationCenter, response: UserNotifications.UNNotificationResponse)
  @objc public func parsePushData(_ pushDict: [Swift.AnyHashable : Any]) throws -> AdBrixRmKit.AbxRemotePushModel
  @objc public func openPush(_ abxRemotePushModel: AdBrixRmKit.AbxRemotePushModel)
  @objc public func didReceiveAbxPush(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc public func abxPushServiceExtensionTimeWillExpire()
  @objc public func getSelfServeInAppMessages(completion: @escaping ([AdBrixRmKit.SelfServeInAppMessage]) -> ())
  @available(*, deprecated)
  @objc public func getAllInAppMessage(completion: @escaping (AdBrixRmKit.DfnInAppMessageResult) -> ())
  @objc public func openInAppMessage(campaignId: Swift.String, completion: @escaping (AdBrixRmKit.Completion) -> ())
  @objc public func fetchInAppMessage(completion: @escaping (AdBrixRmKit.DfnInAppMessageFetchResult) -> ())
  @objc public func setInAppMessageToken(token: Swift.String)
  @objc public func pauseInAppMessage()
  @objc public func resumeInAppMessage()
  @objc public func setLogDelegate(delegate: AdBrixRmKit.AdBrixRMLogDelegate)
  @objc public func setInAppMessageClickDelegate(delegate: AdBrixRmKit.AdBrixRMInAppMessageClickDelegate)
  @objc public func setInAppMessageAutoFetchDelegate(delegate: AdBrixRmKit.DfnInAppMessageAutoFetchDelegate)
  @objc public func printSdkState()
  @objc public func setDeeplinkDelegate(delegate: AdBrixRmKit.AdBrixRMDeeplinkDelegate)
  @objc public func setDeferredDeeplinkDelegate(delegate: AdBrixRmKit.AdBrixRMDeferredDeeplinkDelegate)
  @objc public func setDeviceId(_ device_id: Swift.String)
  @objc public func flushAllEvents(completion: ((AdBrixRmKit.DfnResult) -> ())? = nil)
  @objc public func getSDKVersion() -> Swift.String
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, *)
  public func getSubscriptionStatus() async -> AdBrixRmKit.GetSubscriptionResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, *)
  public func setSubscriptionStatus(status: AdBrixRmKit.SubscriptionStatus) async -> AdBrixRmKit.SetSubscriptionResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, *)
  public func setKakaoId(kakaoId: Swift.String) async -> AdBrixRmKit.SetCiProfileResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, *)
  public func setPhoneNumber(number: Swift.String) async -> AdBrixRmKit.SetCiProfileResult
  #endif
  @objc public enum AdBrixEventUploadCountInterval : Swift.Int {
    case MIN = 10, NORMAL = 30, MAX = 60
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdBrixEventUploadTimeInterval : Swift.Int {
    case MIN = 30, NORMAL = 60, MAX = 120
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdBrixLogLevel : Swift.Int {
    case NONE = 0, TRACE = 1, DEBUG = 2, INFO = 3, WARNING = 4, ERROR = 5
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdBrixGenderType : Swift.Int {
    case Male = 2, Female = 1, Unknown = 0
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdBrixRmSignUpChannel : Swift.Int {
    case AdBrixRmSignUpKakaoChannel = 1, AdBrixRmSignUpNaverChannel = 2, AdBrixRmSignUpLineChannel = 3, AdBrixRmSignUpGoogleChannel = 4, AdBrixRmSignUpFacebookChannel = 5, AdBrixRmSignUpTwitterChannel = 6, AdBrixRmSignUpWhatsAppChannel = 7, AdBrixRmSignUpQQChannel = 8, AdBrixRmSignUpWeChatChannel = 9, AdBrixRmSignUpUserIdChannel = 10, AdBrixRmSignUpETCChannel = 11, AdBrixRmSignUpSkTidChannel = 12, AdBrixRmSignUpAppleIdChannel = 13
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdBrixRmInviteChannel : Swift.Int {
    case AdBrixRmInviteKakaoChannel = 1, AdBrixRmInviteNaverChannel = 2, AdBrixRmInviteLineChannel = 3, AdBrixRmInviteGoogleChannel = 4, AdBrixRmInviteFacebookChannel = 5, AdBrixRmInviteTwitterChannel = 6, AdBrixRmInviteWhatsAppChannel = 7, AdBrixRmInviteQQChannel = 8, AdBrixRmInviteWeChatChannel = 9, AdBrixRmInviteETCChannel = 10
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdBrixRmCurrencyType : Swift.Int {
    case KRW = 1, USD = 2, JPY = 3, EUR = 4, GBP = 5, CNY = 6, TWD = 7, HKD = 8, IDR = 9, INR = 10, RUB = 11, THB = 12, VND = 13, MYR = 14
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdbrixRmPaymentMethod : Swift.Int {
    case CreditCard = 1, BankTransfer = 2, MobilePayment = 3, ETC = 4
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdBrixRmSharingChannel : Swift.Int {
    case AdBrixRmSharingFacebook = 1, AdBrixRmSharingKakaoTalk = 2, AdBrixRmSharingKakaoStory = 3, AdBrixRmSharingLine = 4, AdBrixRmSharingWhatsApp = 5, AdBrixRmSharingQQ = 6, AdBrixRmSharingWeChat = 7, AdBrixRmSharingSMS = 8, AdBrixRmSharingEmail = 9, AdBrixRmSharingCopyUrl = 10, AdBrixRmSharingETC = 11
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public func didBecomeActive()
  @objc public func willResignActive()
  @objc deinit
}
@objc public protocol AdBrixRMDeeplinkDelegate {
  @objc func didReceiveDeeplink(deeplink: Swift.String)
}
@objc public protocol AdBrixRMDeferredDeeplinkDelegate {
  @objc func didReceiveDeferredDeeplink(deeplink: Swift.String)
}
@objc public protocol AdBrixRmPushLocalDelegate {
  @objc func pushLocalCallback(data: Swift.Dictionary<Swift.String, Any>?, state: UIKit.UIApplication.State)
}
@objc public protocol AdBrixRmPushRemoteDelegate {
  @objc func pushRemoteCallback(data: Swift.Dictionary<Swift.String, Any>?, state: UIKit.UIApplication.State)
}
@objc public protocol AdBrixRmPushNoticePopupLinkClickDelegate {
  @objc func noticePopupLinkClickCallback(popupSpaceKey: Swift.String, data: Swift.Dictionary<Swift.String, Any>?)
}
@objc public protocol AdBrixRmPushNoticePopupCloseDelegate {
  @objc func noticePopupCloseCallback(popupSpaceKey: Swift.String, data: Swift.Dictionary<Swift.String, Any>?)
}
@objc public protocol AdBrixRMLogDelegate {
  @objc func didPrintLog(level: AdBrixRmKit.AdBrixRM.AdBrixLogLevel, log: Swift.String)
}
@objc public protocol AdBrixRMInAppMessageClickDelegate {
  @objc func onReceiveInAppMessageClick(actionId: Swift.String, actionType: Swift.String, actionArg: Swift.String, isClosed: Swift.Bool)
}
@objc public protocol DfnInAppMessageAutoFetchDelegate {
  @objc func didFetchInAppMessage(result: AdBrixRmKit.DfnInAppMessageFetchResult)
}
@_inheritsConvenienceInitializers @objc public class AdBrixRmCommerceProductCategoryModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setModel(categoryArr: [Swift.String]) -> AdBrixRmKit.AdBrixRmCommerceProductCategoryModel
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AdBrixRmCommerceProductModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setModel(productId: Swift.String, productName: Swift.String, price: Swift.Double, quantity: Swift.Int, discount: Swift.Double, currencyString: Swift.String?, categories: AdBrixRmKit.AdBrixRmCommerceProductCategoryModel?, productAttrsMap: AdBrixRmKit.AdBrixRmAttrModel?) -> AdBrixRmKit.AdBrixRmCommerceProductModel
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DfnInAppMessage : ObjectiveC.NSObject {
  @objc final public let campaignId: Swift.String
  @objc final public let identifier: Swift.String
  @objc final public let position: Swift.String?
  final public let extAttr: [Swift.String : Any?]?
  @objc final public let type: Swift.String
  @objc final public let html: Swift.String
  @objc final public let bgColor: Swift.String
  @objc final public let overlayColor: Swift.String
  final public let startDateTime: Swift.Int64?
  final public let endDateTime: Swift.Int64?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DfnIAMTrigger : ObjectiveC.NSObject {
  @objc final public let type: Swift.String
  @objc final public let eventName: Swift.String?
  @objc final public let priority: Swift.Int64
  final public let evtProperties: [[Swift.String : Any?]]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SelfServeInAppMessage : ObjectiveC.NSObject {
  @objc final public let campaignId: Swift.String
  final public let extAttr: [Swift.String : Any?]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DfnInAppMessageResult : ObjectiveC.NSObject {
  @objc final public let isSucceeded: Swift.Bool
  @objc public func getData() -> [AdBrixRmKit.DfnInAppMessage]?
  @objc public func getError() -> Swift.Error?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DfnInAppMessageFetchResult : ObjectiveC.NSObject {
  @objc final public let isSucceeded: Swift.Bool
  @objc public func getError() -> Swift.Error?
  @objc deinit
}
extension AdBrixRmKit.SubscriptionStatus._Type : Swift.Equatable {}
extension AdBrixRmKit.SubscriptionStatus._Type : Swift.Hashable {}
extension AdBrixRmKit.SubscriptionStatus._Type : Swift.RawRepresentable {}
extension AdBrixRmKit.UserProfileServerError : Swift.Equatable {}
extension AdBrixRmKit.UserProfileServerError : Swift.Hashable {}
extension AdBrixRmKit.UserProfileServerError : Swift.RawRepresentable {}
extension AdBrixRmKit.ActionHistoryIdType : Swift.Equatable {}
extension AdBrixRmKit.ActionHistoryIdType : Swift.Hashable {}
extension AdBrixRmKit.ActionHistoryIdType : Swift.RawRepresentable {}
extension AdBrixRmKit.Completion : Swift.Equatable {}
extension AdBrixRmKit.Completion : Swift.Hashable {}
extension AdBrixRmKit.Completion : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixEventUploadCountInterval : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixEventUploadCountInterval : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixEventUploadCountInterval : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixEventUploadTimeInterval : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixEventUploadTimeInterval : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixEventUploadTimeInterval : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixLogLevel : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixLogLevel : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixLogLevel : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixGenderType : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixGenderType : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixGenderType : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmSignUpChannel : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmSignUpChannel : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmSignUpChannel : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmInviteChannel : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmInviteChannel : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmInviteChannel : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmCurrencyType : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmCurrencyType : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmCurrencyType : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdbrixRmPaymentMethod : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdbrixRmPaymentMethod : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdbrixRmPaymentMethod : Swift.RawRepresentable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel : Swift.Equatable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel : Swift.Hashable {}
extension AdBrixRmKit.AdBrixRM.AdBrixRmSharingChannel : Swift.RawRepresentable {}
